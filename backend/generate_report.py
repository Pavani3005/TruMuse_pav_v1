from dotenv import load_dotenv
import os
import reportlab.lib.pagesizes as pagesizes
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch

# Load environment variables
load_dotenv()

def to_roman_numeral(num):
    roman_values = [
        (1000, "M"), (900, "CM"), (500, "D"), (400, "CD"),
        (100, "C"), (90, "XC"), (50, "L"), (40, "XL"),
        (10, "X"), (9, "IX"), (5, "V"), (4, "IV"), (1, "I")
    ]
    result = ""
    for value, numeral in roman_values:
        while num >= value:
            result += numeral
            num -= value
    return result

def generate_attribution_report(image_path, output, artist_infos, bio_summaries):
    doc = SimpleDocTemplate(output, pagesize=pagesizes.A4)
    styles = getSampleStyleSheet()
    custom_style = ParagraphStyle(name='Custom', parent=styles['Normal'], fontSize=12, leading=14)
    
    story = []
    logo = Image('static/trumuse_logo.png', width=1*inch, height=1*inch)
    story.append(logo)
    story.append(Spacer(1, 12))
    
    title = "Attribution Report"
    story.append(Paragraph(title, styles['Title']))
    story.append(Spacer(1, 12))
    
    intro = "This is a detailed attribution report generated by TruMuse, our AI-powered platform for tracking artistic influence. Based on image similarity and metadata analysis, this report highlights potential source artists and includes relevant references for further exploration."
    story.append(Paragraph(intro, custom_style))
    story.append(Spacer(1, 12))
    
    for i, artist_info in enumerate(artist_infos, 1):
        metadata = artist_info["metadata"]
        if metadata:
            name = metadata.get("name", "Unknown")
            genre = metadata.get("genre", "Unknown")
            nationality = metadata.get("nationality", "Unknown")
            bio = bio_summaries.get(name, "(No bio summary available)")
            wikipedia = metadata.get("wikipedia", "No reference available")
            score = artist_info["score"]
            
            content = f"""
            <b>{to_roman_numeral(i)}) Artist Name:</b> {name}<br/>
            <b>Genre:</b> {genre}<br/>
            <b>Nationality:</b> {nationality}<br/>
            <b>Bio:</b> {bio}<br/>
            <b>References:</b> {wikipedia}<br/>
            <b>Similarity Score:</b> {score}<br/>
            """
            story.append(Paragraph(content, custom_style))
            story.append(Spacer(1, 12))
    
    footer = "Â© 2025 TruMuse. All rights reserved. This report is auto-generated for educational and research purposes. Artwork rights belong to their respective creators. Wikipedia links are cited for reference only."
    story.append(Paragraph(footer, styles['Normal']))
    
    doc.build(story)

if __name__ == "_main_":
    with open('test.pdf', 'wb') as f:
        artist_infos = [{"artist_id": 0, "score": 0.9, "metadata": {"name": "Artist0", "genre": "Painting", "nationality": "Unknown", "wikipedia": "https://example.com"}}]
        bio_summaries = {"Artist0": "Sample bio"}
        generate_attribution_report('input_image.jpg', f, artist_infos, bio_summaries)